'''
924. Minimize Malware Spread
https://leetcode.com/problems/minimize-malware-spread/

You are given a network of n nodes represented as an n x n adjacency matrix graph,
where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected,
and at least one of those two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after
the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes,
it might still be infected later due to the malware spread.

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Constraints:
    n == graph.length
    n == graph[i].length
    2 <= n <= 300
    graph[i][j] is 0 or 1.
    graph[i][j] == graph[j][i]
    graph[i][i] == 1
    1 <= initial.length <= n
    0 <= initial[i] <= n - 1
    All the integers in initial are unique.
'''
from collections import Counter
from typing import List

class UnionFind:
    def __init__(self, count: int):
        self.tree = list(range(count)) # [node index : parent index]
        self.sizes = [1] * count # [node index : size of the tree node is in]

    def find(self, node: int) -> int:
        tree = self.tree
        if tree[node] != node:
            tree[node] = self.find(tree[node])
        return tree[node]
    
    def union(self, a: int, b: int):
        rootA = self.find(a)
        rootB = self.find(b)
        if rootA != rootB:
            self.tree[rootA] = rootB
            self.sizes[rootB] += self.sizes[rootA]
    
    def getSize(self, node: int) -> int:
        return self.sizes[self.find(node)]

class Solution:
    def minMalwareSpread(self, graphInput: List[List[int]], initials: List[int]) -> int:
        nodeCount = len(graphInput)
        graph = UnionFind(nodeCount)
        
        for i in range(nodeCount):
            for j in range(i + 1, nodeCount):
                if graphInput[i][j] == 1:
                    graph.union(i, j)
 
        # For a node in initials, if it has another node in same tree,
        # then removing the node won't reduce spread.
        # Only remove a node that is the only affected node in the same tree will reduce spread.
        initialRootToCount = Counter(graph.find(node) for node in initials)
        maxTreeSize = 0
        nodeToRemove = min(initials)
        for init in initials:
            initialRoot = graph.find(init)
            if initialRootToCount[initialRoot] == 1:
                # Only care about the single initial node which is the single virus of the tree.
                # Find the single node with the largest tree size
                treeSize = graph.getSize(initialRoot)
                if treeSize > maxTreeSize:
                    maxTreeSize = treeSize
                    nodeToRemove = init
                elif treeSize == maxTreeSize and init < nodeToRemove:
                    # Need smaller indexed node
                    nodeToRemove = init
        return nodeToRemove
