'''
928. Minimize Malware Spread II
https://leetcode.com/problems/minimize-malware-spread-ii/

You are given a network of n nodes represented as an n x n adjacency matrix graph,
where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected,
and at least one of those two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network
after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from
this node to any other node.

Return the node that, if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial),
return such a node with the smallest index.

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1

Constraints:
    n == graph.length
    n == graph[i].length
    2 <= n <= 300
    graph[i][j] is 0 or 1.
    graph[i][j] == graph[j][i]
    graph[i][i] == 1
    1 <= initial.length < n
    0 <= initial[i] <= n - 1
    All the integers in initial are unique.
'''
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initials: List[int]) -> int:
        nodeCount = len(graph)
        initialSet = set(initials)

        # From each node in initials, bfs to each unaffected node
        nodeToInitials = collections.defaultdict(list)

        for init in initials:
            visited = set()
            queue = collections.deque([init])
            while queue:
                fromNode = queue.popleft()
                for toNode in range(nodeCount):
                    if graph[fromNode][toNode] != 0 and toNode not in visited and toNode not in initialSet:
                        visited.add(toNode)
                        queue.append(toNode)
                        nodeToInitials[toNode].append(init)

        initialToNodeCount = collections.Counter()
        for node, inits in nodeToInitials.items():
            if len(inits) == 1:
                # Only care about the nodes that is only affected by 1 initial node
                init = inits[0]
                initialToNodeCount[init] += 1
        
        nodeToRemove = min(initials)
        maxNodeCount = 0
        for init, count in initialToNodeCount.items():
            if count > maxNodeCount:
                maxNodeCount = count
                nodeToRemove = init
            elif count == maxNodeCount and init < nodeToRemove:
                nodeToRemove = init 
        return nodeToRemove