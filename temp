'''
707. Design Linked List
'''
class Node:
    '''
    Double Linked List Node
    '''
    def __init__(self, val = None):
        self.val = val
        self.next = None
        self.prev = None
        
class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        # Use 2 dummy nodes to cover boundaries
        head = Node()
        tail = Node()
        head.next = tail
        tail.prev = head
        self.head = head
        self.tail = tail
        
    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        @index is 0 based
        """
        p = self.head
        for i in range(index + 1):
            p = p.next
            if not p:
                return -1
        else:
            return p.val

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        head = self.head
        node = Node(val)
        
        node.prev = head
        node.next = head.next
        head.next = node
        node.next.prev = node

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        tail = self.tail
        node = Node(val)
        
        node.prev = tail.prev
        node.next = tail
        tail.prev = node
        node.prev.next = node

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        
